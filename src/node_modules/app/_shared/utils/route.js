import {compact, flatten, startsWith, defaults} from "app/_shared/utils"

function join(...paths) {
  return "/" + compact(flatten(paths.map(path => path && path.split("/")))).join("/")
}

export function flattenRoutes(routes, parentPath) {
  let finalRoutes = []
  routes.forEach(route => {
    const routePath = join(parentPath, route.path)
    if (route.handler) {
      const {childRoutes, ...finalRoute} = route
      finalRoute.path = routePath
      defaults(finalRoute, {
        method: "GET"
      })
      finalRoutes = [...finalRoutes, finalRoute]
    }
    if (route.childRoutes) {
      finalRoutes = [...finalRoutes, ...flattenRoutes(route.childRoutes, routePath)]
    }
  })
  return finalRoutes
}

function convertClientParams(path) {
  return path.split("/").map(token => {
    if (startsWith(token, ":")) {
      return "{" + token.substring(1) + "}"
    }
    return token
  }).join("/")
}

export function convertClientRoutes(clientRoutes, handler, isChild) {
  const {getComponents, ...routes} = clientRoutes
  if (routes.path) {
    routes.path = convertClientParams(routes.path)
  }
  if (isChild && getComponents) {
    routes.handler = handler
  }
  if (routes.childRoutes) {
    routes.childRoutes = routes.childRoutes.map(childRoute => convertClientRoutes(childRoute, handler, true))
  }
  return routes
}
