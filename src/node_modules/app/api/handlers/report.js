import {find, map, forEach, isUndefined, range, indexOf} from "app/core/utils"
import {fromCache, TTL_SHORT} from "app/core/utils/cache"
import {findBySource as findGeosBySource} from "app/core/models/geo"
import {create as createMapResult} from "app/core/models/mapResult"
import * as layerByType from "app/tile/layers"
import mockReports from "app/web/mock/reports"
import mockCategories from "app/web/mock/categories"
import random from "app/core/utils/random"

export function getReport(request) {
  return find(mockReports, "id", +request.params.id)
}

export function createReport(request) {
  console.log(request.auth)
  return {id: "new"}
}

function getCategoryData(category, locationType, year, codes) {
  return fromCache(`categoryData/${category.id}/${locationType}/${year}`, TTL_SHORT, key => {
    const rng = random(key)
    const valueByCode = {}
    codes.forEach(code => {
      valueByCode[code] = rng.natural({min: 10000, max: 100000}) * 10
    })
    return valueByCode
  })
}

function getRecordsByLocationType(year, categoriesByLocationType) {
  const recordsByLocationType = {}
  return Promise.all(map(categoriesByLocationType, (categories, locationType) => {
    const records = recordsByLocationType[locationType] = []
    const recordByCode = {}
    return findGeosBySource(locationType).then(geos => geos.map(({code, name}) => {
      const record = {
        code,
        name,
        data: {}
      }
      records.push(record)
      recordByCode[code] = record
      return code
    })).then(codes => {
      return Promise.all(categories.map(category => {
        return getCategoryData(category, locationType, year, codes).then(valueByCode => {
          forEach(valueByCode, (value, code) => {
            const record = recordByCode[code]
            record.data[category.id] = value
          })
        })
      }))
    })
  })).then(() => recordsByLocationType)
}

function calculateMapResults(sessionId, resultId, layers, recordsByLocationType) {
  const mapResults = []
  return Promise.all(layers.map(layer => {
    const {type, locationType, category: categoryId} = layer
    const records = recordsByLocationType[locationType]
    const layerRecords = []
    records.forEach(record => {
      const value = record.data[categoryId]
      if (isUndefined(value)) {
        return
      }
      layerRecords.push({
        code: record.code,
        value
      })
    })
    const layerResults = layerByType[type].createResults(layer, layerRecords)
    mapResults.push(layerResults)
  })).then(() => createMapResult(sessionId, resultId, mapResults))
}

function getReportViewDataForMap(request, report, view) {
  const sessionId = +request.query.sessionId
  const resultId = +request.query.resultId
  const year = resultId % 10000
  const categoriesByLocationType = {}
  view.layers.forEach(({locationType, category: categoryId}) => {
    const category = find(mockCategories, "id", categoryId)
    const categories = categoriesByLocationType[locationType]
      || (categoriesByLocationType[locationType] = [])
    categories.push(category)
  })
  return getRecordsByLocationType(year, categoriesByLocationType).then(recordsByLocationType => {
    return calculateMapResults(sessionId, resultId, view.layers, recordsByLocationType)
      .then(() => recordsByLocationType)
  })
}

function getRecords({categories, locationType, locations}, startYear, endYear) {
  return findGeosBySource(locationType).then(geos => {
    const codes = map(geos, "code")
    const allRecords = []
    const promises = []
    categories.forEach(categoryId => {
      const category = find(mockCategories, "id", categoryId)
      const records = []
      geos.forEach(({code, name}) => {
        if (indexOf(locations, code) === -1) {
          return
        }
        const record = {
          code,
          name,
          categoryId,
          categoryName: category.name,
          data: {}
        }
        records.push(record)
        allRecords.push(record)
      })
      range(startYear, endYear + 1).forEach(year => {
        promises.push(getCategoryData(category, locationType, year, codes).then(valueByCode => {
          records.forEach(({code, data}) => {
            data[year] = valueByCode[code]
          })
        }))
      })
    })
    return Promise.all(promises).then(() => allRecords)
  })
}

function getReportViewDataForTrends(request, report, view) {
  const resultId = +request.query.resultId
  const endYear = resultId % 10000
  const startYear = endYear - +view.timeRange.substring(4) + 1
  return getRecords(view, startYear, endYear)
}

export function getReportViewData(request) {
  const report = find(mockReports, "id", +request.params.id)
  const view = find(report.views, "id", +request.params.viewId)
  if (view.type === "map") {
    return getReportViewDataForMap(request, report, view)
  } else if (view.type === "trends") {
    return getReportViewDataForTrends(request, report, view)
  }
}
