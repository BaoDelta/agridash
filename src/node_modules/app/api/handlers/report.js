import {find} from "app/core/utils"
import random from "app/core/utils/random"
import {findBySource as findGeosBySource} from "app/core/models/geo"
import {createResult as createGeoResult} from "app/core/models/geoResult"
import reports from "app/web/mock/reports"
import cache from "app/core/utils/cache"

export function getReport(request, reply) {
  reply(find(reports, "id", +request.params.id))
}

function getCategoryData(category, source, year, geos) {
  const key = `categoryData/${category.id}/${source}/${year}`
  return cache(key, () => {
    const rng = random(key)
    const data = {}
    // About 80 geos will have data
    const limit = Math.round(80 / geos.length * 100)
    geos.forEach(geo => {
      if (rng.natural({min: 1, max: 100}) > limit) {
        return
      }
      data[geo.code] = rng.natural({min: 1, max: 4})
    })
    return data
  })
}

export function getReportViewData(request, reply) {
  const report = find(reports, "id", +request.params.id)
  const view = find(report.views, "id", +request.params.viewId)
  if (!view.layers) {
    reply(view)
    return
  }
  const sessionId = +request.query.sessionId
  const resultId = +request.query.resultId
  const year = resultId % 10000
  const promiseBySource = {}
  const promises = view.layers.map(({source}) => {
    return promiseBySource[source] || (promiseBySource[source] = findGeosBySource(source))
  })
  Promise.all(promises).then(geosData => {
    const layerDataPromises = view.layers.map((layer, index) => {
      const category = find(report.categories, "id", layer.category)
      const geos = geosData[index]
      return getCategoryData(category, layer.source, year, geos)
    })
    return Promise.all(layerDataPromises).then(data => {
      // TODO Calculate levels
      return createGeoResult(sessionId, resultId, data)
    })
  }).then(() => reply(view))
}
