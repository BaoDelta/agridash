import {find, map, forEach} from "app/core/utils"
import random from "app/core/utils/random"
import cache from "app/core/utils/cache"
import {findBySource as findGeosBySource} from "app/core/models/geo"
import mockReports from "app/web/mock/reports"
import mockCategories from "app/web/mock/categories"

export function getReport(request, reply) {
  reply(find(mockReports, "id", +request.params.id))
}

function getCategoryData(category, location, time, geoCodes) {
  return cache(`categoryData/${category.id}/${location}/${time}`, cache.EX_SHORT, key => {
    const rng = random(key)
    const dataByCode = {}
    geoCodes.forEach(geoCode => {
      if (rng.natural({min: 1, max: 100}) > 50) {
        return
      }
      dataByCode[geoCode] = rng.natural({min: 10000, max: 100000}) * 10
    })
    return dataByCode
  })
}

function getReportViewDataByTime(time, categoriesByLocation) {
  const resultsByLocation = {}
  return Promise.all(map(categoriesByLocation, (categories, location) => {
    const results = resultsByLocation[location] = []
    const resultByCode = {}
    return findGeosBySource(location).then(geos => geos.map(({code, name}) => {
      const result = {
        code,
        name,
        data: {}
      }
      results.push(result)
      resultByCode[code] = result
      return code
    })).then(geoCodes => {
      return Promise.all(categories.map(category => {
        return getCategoryData(category, location, time, geoCodes).then(dataByCode => {
          forEach(dataByCode, (data, code) => {
            const result = resultByCode[code]
            result.data[category.id] = data
          })
        })
      }))
    })
  })).then(() => resultsByLocation)
}

function getReportViewDataForMap(request, report, view) {
  const resultId = +request.query.resultId
  const year = resultId % 10000
  const categoriesByLocation = {}
  view.layers.forEach(({location, category: categoryId}) => {
    const category = find(mockCategories, "id", categoryId)
    const categories = categoriesByLocation[location]
      || (categoriesByLocation[location] = [])
    categories.push(category)
  })
  return getReportViewDataByTime(year, categoriesByLocation)
}

function getReportViewDataForTrends(request, report, view) {
  return Promise.resolve(view)
}

export function getReportViewData(request, reply) {
  const report = find(mockReports, "id", +request.params.id)
  const view = find(report.views, "id", +request.params.viewId)
  if (view.type === "map") {
    getReportViewDataForMap(request, report, view).then(reply)
  } else if (view.type === "trends") {
    getReportViewDataForTrends(request, report, view).then(reply)
  }
}
