import bcrypt from "bcryptjs"
import {create as createError} from "boom"
import {findByUsername, create as createNewUser} from "app/core/models/user"

export function createUser(request) {
  const {name, username, password} = request.payload
  return new Promise((resolve, reject) => {
    findByUsername(username).then(existingUser => {
      if (existingUser) {
        reject(createError(400, "The username already exists", {[username]: "Username exists"}))
        return
      }
      bcrypt.hash(password, 10, (err, hash) => {
        if (err) {
          reject(err)
          return
        }
        createNewUser({
          name,
          username,
          hash
        }).then(user => {
          request.auth.session.set({
            username
          })
          resolve(user)
        })
      })
    }).catch(reject)
  })
}

export function login(request) {
  const {username, password} = request.payload
  return new Promise((resolve, reject) => {
    findByUsername(username, true).then(user => {
      if (!user) {
        reject(createError(401, "Invalid username or password", {[username]: "User not found"}))
        return
      }
      bcrypt.compare(password, user.hash, (err, matched) => {
        if (err) {
          reject(err)
          return
        }
        if (!matched) {
          reject(createError(401, "Invalid username or password", {[username]: "Password does not match"}))
          return
        }
        request.auth.session.set({
          username
        })
        resolve(findByUsername(username))
      })
    }).catch(reject)
  })
}

export function logout(request) {
  request.auth.session.clear()
}
