import {createClient} from "redis"
import {createLogger} from "bunyan"
import {assign} from "app/core/utils"
import {redis as redisConfig} from "app/config"

const redis = createClient(redisConfig.port || 6379, redisConfig.host, {})

const log = createLogger({name: "cache"})

redis.on("error", error => {
  log.error(error)
})

redis.auth(redisConfig.password, error => {
  if (error) {
    throw error
  }
})

function promisify(command) {
  return function(...args) {
    return new Promise((resolve, reject) => {
      redis[command](...args, (error, response) => {
        if (error) {
          reject(error)
          return
        }
        resolve(response)
      })
    })
  }
}

const set = promisify("set")
const get = promisify("get")

function cache(key, request) {
  return get(key).then(response => {
    if (response) {
      return JSON.parse(response)
    }
    return request().then(value => set(key, JSON.stringify(value)).then(() => value))
  })
}

assign(cache, {
  set,
  get
})

export default cache
