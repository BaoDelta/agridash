import {createClient} from "redis"
import {createLogger} from "bunyan"
import {assign} from "app/core/utils"
import {redis as redisConfig} from "app/config"

const EX_SHORT = 10 * 60
const EX_LONG = 60 * 60

const log = createLogger({name: "cache"})

const redis = createClient(redisConfig.port || 6379, redisConfig.host, {
  "auth_pass": redisConfig.password
})

redis.on("error", error => {
  log.error(error)
})

redis.select(redisConfig.database || 0, error => {
  if (error) {
    log.error(error)
    return
  }
  log.info({
    cache: `${redis.address}#${redis.selected_db}`
  })
})

function promisify(command) {
  return function(...args) {
    return new Promise((resolve, reject) => {
      redis[command](...args, (error, response) => {
        if (error) {
          reject(error)
          return
        }
        resolve(response)
      })
    })
  }
}

const set = promisify("set")
const setex = promisify("setex")
const get = promisify("get")

function cache(key, time, request) {
  return get(key).then(response => {
    if (response) {
      return JSON.parse(response)
    }
    return Promise.resolve(request(key)).then(value => {
      if (time) {
        return setex(key, time, JSON.stringify(value)).then(() => value)
      }
      return set(key, JSON.stringify(value)).then(() => value)
    })
  })
}

assign(cache, {
  EX_SHORT,
  EX_LONG,
  set,
  setex,
  get
})

export default cache
