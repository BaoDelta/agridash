import {createClient} from "redis"
import {createLogger} from "bunyan"
import {assign} from "app/core/utils"
import {redis as redisConfig} from "app/config"

const redis = createClient(redisConfig.port || 6379, redisConfig.host, {})

const log = createLogger({name: "cache"})

redis.on("error", error => {
  log.error(error)
})

redis.auth(redisConfig.password, error => {
  if (error) {
    throw error
  }
})

function set(key, value) {
  return new Promise((resolve, reject) => {
    redis.set(key, value, (error, response) => {
      if (error) {
        reject(error)
        return
      }
      resolve(response)
    })
  })
}

function cache(key, request) {
  return new Promise((resolve, reject) => {
    redis.get(key, (error, response) => {
      if (error) {
        reject(error)
        return
      }
      if (response) {
        resolve(JSON.parse(response))
        return
      }
      request().then(value => {
        set(key, JSON.stringify(value)).then(() => {
          resolve(value)
        }, reject)
      }, reject)
    })
  })
}

assign(cache, {
  set
})

export default cache
