import tv4 from "tv4"
import {createLogger} from "bunyan"
import {create as createError} from "boom"
import {isUndefined, isNull} from "app/core/utils"

const log = createLogger({name: "handler"})

export function handlePromise(handler, schema) {
  const onFulfilled = handler.then || (reply => response => {
    reply(response)
  })
  const onRejected = handler.catch || (reply => error => {
    if (!isUndefined(error.data) && !isNull(error.data)) {
      log.error(error, {
        data: error.data
      })
    } else {
      log.error(error)
    }
    reply(error)
  })
  return (request, reply) => {
    if (schema) {
      const result = tv4.validateResult(request.payload, schema)
      if (!result.valid) {
        onRejected(reply)(createError(400, "Invalid request"))
        return
      }
    }
    Promise.resolve(handler(request)).then(onFulfilled(reply), onRejected(reply))
  }
}
