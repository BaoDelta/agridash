import path from "path"
import fs from "fs"
import toml from "toml"
import mapnik from "mapnik"
import SphericalMercator from "sphericalmercator"
import {assign} from "app/core/utils"

mapnik.register_default_input_plugins()

const config = toml.parse(fs.readFileSync(path.resolve("conf/dev.toml"), "utf8"))

const styles = fs.readFileSync(path.join(__dirname, "styles.xml"), "utf8")

const merc = new SphericalMercator()

const postgisConfig = {
  type: "postgis",
  "simplify_geometries": true,
  srid: 3857,
  host: config.database.host,
  dbname: config.database.name,
  user: config.database.user,
  password: config.database.password,
  extent: config.tile.extent
}

const areaQuery = "select geom from geo"
const areaLayer = new mapnik.Layer("area")
areaLayer.datasource = new mapnik.Datasource(assign({
  table: "(" + areaQuery + ") result",
  "geometry_table": "geo",
  "geometry_field": "geom"
}, postgisConfig))
areaLayer.styles = ["area"]

export function renderArea(request, reply) {
  const map = new mapnik.Map(256, 256)
  map.fromString(styles, loadError => {
    if (loadError) {
      console.log(loadError)
      reply(loadError)
      return
    }
    const {x, y, z} = request.params
    map.extent = merc.bbox(+x, +y, +z, false, "900913")
    map.add_layer(areaLayer)
    const image = new mapnik.Image(map.width, map.height)
    map.render(image, renderError => {
      if (renderError) {
        console.log(renderError)
        reply(renderError)
        return
      }
      reply(image.encodeSync("png")).type("image/png")
    })
  })
}
