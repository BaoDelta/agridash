import path from "path"
import mapnik from "mapnik"
import SphericalMercator from "sphericalmercator"
import lru from "lru-cache"
import config from "app/config"

const layersPath = path.join(__dirname, "../layers")

const merc = new SphericalMercator()

const mapOptionsCache = lru({
  max: 10000,
  maxAge: 60000
})

const dataSourceOptions = {
  type: "postgis",
  "simplify_geometries": true,
  srid: 3857,
  host: config.database.host,
  dbname: config.database.name,
  user: config.database.user,
  password: config.database.password,
  extent: config.tile.extent
}

mapnik.register_default_input_plugins()

function createMap(request, layerOptions) {
  const key = layerOptions.name + request.url.search
  let mapOptions = mapOptionsCache.get(key)
  if (!mapOptions) {
    const layer = new mapnik.Layer(layerOptions.name)
    const dataOptions = layerOptions.getDataOptions(request)
    layer.datasource = new mapnik.Datasource({
      ...dataSourceOptions,
      table: "(" + dataOptions.query + ") result",
      "geometry_table": dataOptions.table,
      "geometry_field": dataOptions.column
    })
    layer.styles = [layerOptions.name]
    mapOptions = {
      layer,
      style: `<?xml version="1.0" encoding="utf-8"?><Map>${dataOptions.style}</Map>`
    }
    mapOptionsCache.set(key, mapOptions)
  }
  const map = new mapnik.Map(256, 256)
  if (layerOptions.bufferSize) {
    map.bufferSize = layerOptions.bufferSize
  }
  return new Promise((resolve, reject) => {
    map.fromString(mapOptions.style, {
      base: layersPath
    }, err => {
      if (err) {
        reject(err)
        return
      }
      const {x, y, z} = request.params
      map.extent = merc.bbox(+x, +y, +z, false, "900913")
      map.add_layer(mapOptions.layer)
      resolve(map)
    })
  })
}

export default createMap
