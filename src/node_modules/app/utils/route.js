import {startsWith, compact, flatten} from "app/utils"
import {renderReact} from "app/_server/handlers"

function join(...paths) {
  return "/" + compact(flatten(paths.map(path => path.split("/")))).join("/")
}

function convertParams(path) {
  return path.split("/").map(token => {
    if (startsWith(token, ":")) {
      return "{" + token.substring(1) + "}"
    }
    return token
  }).join("/")
}

export function addClientRoutes(routes, clientRoutes, parentPath) {
  let routePath = clientRoutes.path
  if (routePath) {
    if (!startsWith(routePath, "/")) {
      routePath = join(parentPath, routePath)
    }
    routePath = convertParams(routePath)
    if (clientRoutes.getComponents) {
      routes.push({
        path: routePath,
        handler: renderReact
      })
    } else if (clientRoutes.onEnter) {
      routes.push({
        path: routePath,
        handler: (request, reply) => {
          clientRoutes.onEnter(null, {
            to: path => {
              reply.redirect(path)
            }
          })
        }
      })
    }
  }
  if (clientRoutes.childRoutes) {
    clientRoutes.childRoutes.forEach(childRoute => {
      addClientRoutes(routes, childRoute, routePath)
    })
  }
}
