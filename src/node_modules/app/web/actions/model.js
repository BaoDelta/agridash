import {createAction} from "redux-actions"
import {get} from "app/core/utils/ajax"

export const UPDATE_MODEL = "UPDATE_MODEL"

export const updateModel = createAction(UPDATE_MODEL)

export function getGeos(source) {
  return (dispatch, getState) => {
    const {info, model: {geosBySource}} = getState()
    if (geosBySource && geosBySource[source]) {
      return Promise.resolve()
    }
    return get(`${info.apiUrl}/geo/source/${source}`)
    .then(geos => dispatch(updateModel({
      geosBySource: {
        [source]: geos
      }
    })))
  }
}

export function getViewData(report, view) {
  return (dispatch, getState) => {
    const {info, model: {viewData: viewDataState}} = getState()
    const key = `${report.id}/${view.id}`
    if (viewDataState && viewDataState[key]) {
      return Promise.resolve()
    }
    return get(`${info.apiUrl}/report/${report.id}/view/${view.id}/data`)
    .then(viewData => dispatch(updateModel({
      viewData: {
        [key]: viewData
      }
    })))
  }
}

export function getUser(username) {
  return (dispatch, getState) => {
    const {info} = getState()
    return get(`${info.apiUrl}/user/${username}`)
    .then(user => dispatch(updateModel({
      user: {
        [user.id]: user
      }
    })))
  }
}

export function getReport(id) {
  return (dispatch, getState) => {
    const {info} = getState()
    return get(`${info.apiUrl}/report/${id}`)
    .then(report => {
      const {author, ...others} = report
      return dispatch(updateModel({
        user: {
          [author.id]: author
        },
        report: {
          [report.id]: {
            ...others,
            authorId: author.id
          }
        }
      }))
    })
  }
}
