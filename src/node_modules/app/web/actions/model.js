import {createAction} from "redux-actions"
import {get} from "app/core/utils/ajax"
import {updateInfo} from "app/web/actions/info"

export const UPDATE_MODEL = "UPDATE_MODEL"

export const updateModel = createAction(UPDATE_MODEL)

export function getGeos(source) {
  return (dispatch, getState) => {
    const {info, model: {geo: geoState}} = getState()
    if (geoState && geoState[source]) {
      return Promise.resolve()
    }
    return get(`${info.apiUrl}/geo/source/${source}`)
    .then(geos => {
      const geoByCode = {}
      geos.forEach(geo => {
        geoByCode[geo.code] = geo
      })
      return dispatch(updateModel({
        geo: {
          [source]: {
            geos,
            geoByCode
          }
        }
      }))
    })
  }
}

export function getUser(username) {
  return (dispatch, getState) => {
    const {info} = getState()
    return get(`${info.apiUrl}/user/${username}`)
    .then(user => dispatch(updateModel({
      user: {
        [user.id]: user
      }
    })))
  }
}

export function getReport(id) {
  return (dispatch, getState) => {
    const {info} = getState()
    return get(`${info.apiUrl}/report/${id}`)
    .then(report => {
      const {author, ...others} = report
      return dispatch(updateModel({
        user: {
          [author.id]: author
        },
        report: {
          current: {
            ...others,
            authorId: author.id
          }
        }
      }))
    })
  }
}

export function getTrendsData(report, view, requestId) {
  return (dispatch, getState) => {
    const {info} = getState()
    dispatch(updateModel({
      viewData: {
        trends: {
          reportId: report.id,
          viewId: view.id,
          requestId
        }
      }
    }))
    return get(`${info.apiUrl}/report/${report.id}/view/${view.id}/trendsData`, {
      requestId
    })
    .then(trendsData => {
      const {model: {viewData}} = getState()
      const {trends: currentTrends} = viewData
      if (currentTrends && report.id === currentTrends.reportId && view.id === currentTrends.viewId
          && requestId === currentTrends.requestId) {
        dispatch(updateModel({
          viewData: {
            trends: {
              ...currentTrends,
              data: trendsData
            }
          }
        }))
      }
    })
  }
}

export function getMapData(report, view, requestId) {
  return (dispatch, getState) => {
    const {info} = getState()
    dispatch(updateModel({
      viewData: {
        map: {
          reportId: report.id,
          viewId: view.id,
          requestId
        }
      }
    }))
    return get(`${info.apiUrl}/report/${report.id}/view/${view.id}/mapData`, {
      sessionId: info.sessionId,
      year: 2014,
      requestId
    })
    .then(mapData => {
      const {model: {viewData}} = getState()
      const {map: currentMap} = viewData
      if (currentMap && report.id === currentMap.reportId && view.id === currentMap.viewId
          && requestId === currentMap.requestId) {
        const {sessionId} = mapData
        if (sessionId) {
          dispatch(updateInfo({
            sessionId
          }))
        }
        dispatch(updateModel({
          viewData: {
            map: {
              ...currentMap,
              data: mapData
            }
          }
        }))
      }
    })
  }
}
