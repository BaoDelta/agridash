import {subscribe, getState} from "app/web/store"
import styles from "app/web/forms/common.css"

export function subscribeArray(arrayField, properties, listener) {
  arrayField.on("add", itemField => {
    properties.forEach(property => {
      const {[property]: propertyField} = itemField.childrenByPropertyId
      propertyField.on("change", listener)
    })
  })
  arrayField.on("remove", listener)
  arrayField.on("move", listener)
}

export function subscribeDataSource(name) {
  return {
    dataSource(done) {
      const {form: formState} = getState()
      done(formState.dataSource[name])
    },
    postRender(done) {
      subscribe(() => {
        this.refresh()
      })
      done()
    }
  }
}

export function getArraySchema(itemSchema) {
  return {
    type: "array",
    items: itemSchema
  }
}

export function getHiddenOptions(options) {
  return {
    type: "hidden",
    ...options
  }
}

export function getArrayOptions(options) {
  return {
    toolbarSticky: true,
    animate: false,
    ...options
  }
}

export function getSelectOptions(options) {
  return {
    type: "select",
    noneLabel: "-- Select --",
    disableSort: true,
    ...options
  }
}

export function getMultiSelectOptions(options) {
  return {
    type: "select",
    removeDefaultNone: true,
    validate: false,
    disableSort: true,
    multiple: true,
    multiselect: {
      maxHeight: 200,
      enableCaseInsensitiveFiltering: true,
      buttonWidth: "100%",
      numberDisplayed: 10,
      selectedClass: null
    },
    ...options
  }
}

export function getFormOptions(submitLabel, submitCallback, options) {
  const {$} = window
  return {
    toggleSubmitValidState: false,
    buttons: {
      submit: {
        title: submitLabel,
        styles: "btn btn-primary",
        click(event) {
          this.refreshValidationState(true)
          const buttonsContainer = $(event.target).parent()
          if (this.isValid()) {
            if (buttonsContainer.children().length !== 1) {
              buttonsContainer.children().first().remove()
            }
            submitCallback(this.getValue())
          } else if (buttonsContainer.children().length === 1) {
            const errorMessage = $(`<span class="label label-danger ${styles.message}">The form is not valid.</span>`)
            buttonsContainer.prepend(errorMessage)
            setTimeout(() => {
              if (buttonsContainer.children().length !== 1) {
                buttonsContainer.children().first().remove()
              }
            }, 5000)
          }
        }
      }
    },
    ...options
  }
}
