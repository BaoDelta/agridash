import $ from "jquery"
import Alpaca from "alpaca"
import {subscribe, getState, dispatch} from "app/web/store"
import styles from "app/web/forms/common.css"
import {find} from "app/core/utils"
import {initForm, removeForm, submitForm} from "app/web/actions/form"

export function subscribeArray(arrayField, properties, listener) {
  arrayField.on("add", itemField => {
    properties.forEach(property => {
      const {[property]: propertyField} = itemField.childrenByPropertyId
      propertyField.on("change", listener)
    })
  })
  arrayField.on("remove", listener)
  // Too slow to handle move event
  // arrayField.on("move", listener)
}

export function getForm(field) {
  let nextParent = field
  while (nextParent && nextParent.parent) {
    nextParent = nextParent.parent
  }
  return nextParent
}

export function subscribeDataSource(name, selectFirst) {
  return {
    dataSource(done) {
      const form = getForm(this)
      const {form: {[form.id]: formState}} = getState()
      const options = formState && formState.dataSource && formState.dataSource[name]
      if (selectFirst && options && options.length && !find(options, "value", this.data)) {
        this.setValue(options[0].value)
      }
      done(options)
    },
    postRender(done) {
      const unsubscribe = subscribe(() => {
        const form = getForm(this)
        const {form: {[form.id]: formState}} = getState()
        if (!formState) {
          unsubscribe()
          return
        }
        if (!this.field.is(":hidden")) {
          this.refresh()
        }
      })
      done()
    }
  }
}

export function getArraySchema(itemSchema) {
  return {
    type: "array",
    items: itemSchema
  }
}

export function getHiddenOptions(options) {
  return {
    type: "hidden",
    ...options
  }
}

export function getArrayOptions(options) {
  return {
    toolbarSticky: true,
    animate: false,
    ...options
  }
}

export function getSelectOptions(options) {
  return {
    type: "select",
    noneLabel: "-- Select --",
    disableSort: true,
    ...options
  }
}

export function getMultiSelectOptions(options) {
  return {
    type: "select",
    removeDefaultNone: true,
    validate: false,
    disableSort: true,
    multiple: true,
    multiselect: {
      maxHeight: 200,
      enableCaseInsensitiveFiltering: true,
      buttonWidth: "100%",
      numberDisplayed: 10,
      selectedClass: null
    },
    ...options
  }
}

export function createForm(element, schema, options, formOptions) {
  let elements = {}
  Alpaca(element, {
    schema,
    options: {
      ...options,
      form: {
        toggleSubmitValidState: false,
        buttons: {
          submit: {
            title: formOptions.buttonLabel,
            styles: "btn btn-primary",
            click() {
              const {form: {[elements.form.id]: formState}} = getState()
              if (formState.loading) {
                return
              }
              this.refreshValidationState(true)
              if (this.isValid()) {
                dispatch(submitForm(elements.form.id, this.getValue(), formOptions.done))
              } else {
                elements.loadError.html("The form is not valid").show()
              }
            }
          }
        }
      },
      postRender(done) {
        elements.form = this
        const buttonsContainer = $(this.domEl).find(".alpaca-form-buttons-container")
        elements.button = buttonsContainer.find("button")
        elements.loading = Alpaca.createLoadingIcon().hide()
        elements.loadError = $(`<span class="label label-danger ${styles.message}"></span>`).hide()
        buttonsContainer.prepend(elements.loadError)
        buttonsContainer.prepend(elements.loading)
        dispatch(initForm({
          id: this.id,
          url: formOptions.url
        }))
        if (options.postRender) {
          options.postRender(done)
        } else {
          done()
        }
      }
    }
  })
  const unsubscribe = subscribe(() => {
    const {form: {[elements.form.id]: formState}} = getState()
    if (!formState) {
      unsubscribe()
      return
    }
    if (formState.loading) {
      elements.loading.show()
      elements.loadError.hide()
      elements.button.hide()
    } else if (formState.loadError) {
      elements.loading.hide()
      elements.loadError.html(formState.loadError).show()
      elements.button.show()
    } else if (formState.result) {
      elements.loading.hide()
    }
  })
  return () => {
    dispatch(removeForm({
      id: elements.form.id
    }))
    elements = null
  }
}
