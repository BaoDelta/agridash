import {subscribe, getState} from "app/web/store"
import {find} from "app/core/utils"

export function subscribeArray(arrayField, properties, listener) {
  arrayField.on("add", itemField => {
    properties.forEach(property => {
      const {[property]: propertyField} = itemField.childrenByPropertyId
      propertyField.on("change", listener)
    })
  })
  arrayField.on("remove", listener)
  // Too slow to handle move event
  // arrayField.on("move", listener)
}

export function getForm(field) {
  let nextParent = field
  while (nextParent && nextParent.parent) {
    nextParent = nextParent.parent
  }
  return nextParent
}

export function subscribeDataSource(name, selectFirst) {
  return {
    dataSource(done) {
      const form = getForm(this)
      const {form: {[form.id]: formState}} = getState()
      const options = formState && formState.dataSource && formState.dataSource[name]
      if (selectFirst && options && options.length && !find(options, "value", this.data)) {
        this.setValue(options[0].value)
      }
      done(options)
    },
    postRender(done) {
      const unsubscribe = subscribe(() => {
        const form = getForm(this)
        const {form: {[form.id]: formState}} = getState()
        if (!formState) {
          unsubscribe()
          return
        }
        if (!this.field.is(":hidden")) {
          this.refresh()
        }
      })
      done()
    }
  }
}

export function getArraySchema(itemSchema) {
  return {
    type: "array",
    items: itemSchema
  }
}

export function getHiddenOptions(options) {
  return {
    type: "hidden",
    ...options
  }
}

export function getArrayOptions(options) {
  return {
    toolbarSticky: true,
    animate: false,
    ...options
  }
}

export function getSelectOptions(options) {
  return {
    type: "select",
    noneLabel: "-- Select --",
    disableSort: true,
    ...options
  }
}

export function getMultiSelectOptions(options) {
  return {
    type: "select",
    removeDefaultNone: true,
    validate: false,
    disableSort: true,
    multiple: true,
    multiselect: {
      maxHeight: 200,
      enableCaseInsensitiveFiltering: true,
      buttonWidth: "100%",
      numberDisplayed: 10,
      selectedClass: null
    },
    ...options
  }
}
