import $ from "jquery"
import Alpaca from "alpaca"
import {message} from "app/web/forms/form.css"
import {subscribe, getState, dispatch} from "app/web/store"
import {initForm, removeForm, submitForm} from "app/web/actions/form"

function createForm(element, schema, options, formOptions) {
  let elements = {}
  Alpaca(element, {
    schema,
    options: {
      ...options,
      form: {
        toggleSubmitValidState: false,
        buttons: {
          submit: {
            title: formOptions.buttonLabel,
            styles: "btn btn-primary",
            click() {
              const {form: {[elements.form.id]: formState}} = getState()
              if (formState.loading) {
                return
              }
              this.refreshValidationState(true)
              if (this.isValid()) {
                dispatch(submitForm(elements.form.id, this.getValue(), formOptions.done))
              } else {
                elements.loadError.html("The form is not valid").show()
              }
            }
          }
        }
      },
      postRender(done) {
        elements.form = this
        const buttonsContainer = $(this.domEl).find(".alpaca-form-buttons-container")
        elements.button = buttonsContainer.find("button")
        elements.loading = Alpaca.createLoadingIcon().hide()
        elements.loadError = $(`<span class="label label-danger ${message}"></span>`).hide()
        buttonsContainer.prepend(elements.loadError)
        buttonsContainer.prepend(elements.loading)
        dispatch(initForm({
          id: this.id,
          url: formOptions.url
        }))
        if (options.postRender) {
          options.postRender(done)
        } else {
          done()
        }
      }
    }
  })
  const unsubscribe = subscribe(() => {
    const {form: {[elements.form.id]: formState}} = getState()
    if (!formState) {
      unsubscribe()
      return
    }
    if (formState.loading) {
      elements.loading.show()
      elements.loadError.hide()
      elements.button.hide()
    } else if (formState.loadError) {
      elements.loading.hide()
      elements.loadError.html(formState.loadError).show()
      elements.button.show()
    } else if (formState.result) {
      elements.loading.hide()
    }
  })
  return () => {
    dispatch(removeForm({
      id: elements.form.id
    }))
    elements = null
  }
}

export default createForm
