import {dispatch} from "app/web/store"
import {setDataSource} from "app/web/actions/form"
import {getArraySchema, getHiddenOptions, getArrayOptions, subscribeArray, getForm} from "app/web/forms/common"
import {getSchema as getNameSchema, getOptions as getNameOptions} from "app/web/forms/name"
import {getSchema as getIdSchema} from "app/web/forms/id"
import {getSchema as getNextIdSchema, updateId} from "app/web/forms/nextId"
import {getOptions as getDefaultViewOptions} from "app/web/forms/defaultView"
import {getSchema as getCategorySchema, getOptions as getCategoryOptions, getDataSource as getCategoryDataSource}
  from "app/web/forms/category"
import {getSchema as getViewSchema, getOptions as getViewOptions, getDataSource as getViewDataSource}
  from "app/web/forms/view"

export function getSchema() {
  return {
    type: "object",
    properties: {
      name: getNameSchema(),
      nextCategoryId: getNextIdSchema(),
      nextViewId: getNextIdSchema(),
      defaultView: getIdSchema(),
      categories: getArraySchema(getCategorySchema()),
      views: getArraySchema(getViewSchema())
    }
  }
}

export function getOptions(options) {
  return {
    label: "Report",
    fields: {
      name: getNameOptions(),
      nextCategoryId: getHiddenOptions(),
      nextViewId: getHiddenOptions(),
      defaultView: getDefaultViewOptions(),
      categories: getArrayOptions({
        label: "Categories",
        items: getCategoryOptions(),
        postRender(done) {
          this.on("add", categoryField => {
            updateId(this.parent, categoryField, this.parent.childrenByPropertyId.nextCategoryId)
          })
          subscribeArray(this, ["name"], () => {
            const form = getForm(this)
            dispatch(setDataSource(form.id, "categories", getCategoryDataSource(this.getValue())))
          })
          done()
        }
      }),
      views: getArrayOptions({
        label: "Views",
        items: getViewOptions(),
        postRender(done) {
          this.on("add", viewField => {
            updateId(this.parent, viewField, this.parent.childrenByPropertyId.nextViewId)
          })
          subscribeArray(this, ["name"], () => {
            const form = getForm(this)
            dispatch(setDataSource(form.id, "views", getViewDataSource(this.getValue())))
          })
          done()
        }
      })
    },
    ...options
  }
}
