import createArrayOptions from "app/web/forms/createArrayOptions"
import createSelectOptions from "app/web/forms/createSelectOptions"
import {getSchema as getLayerSchema, getOptions as getLayerOptions} from "app/web/forms/layer"
import {getSchema as getTimeRangeSchema, getOptions as getTimeRangeOptions} from "app/web/forms/timeRange"
import {getSchema as getLocationTypeSchema, getOptions as getLocationTypeOptions, updateLocations}
  from "app/web/forms/locationType"
import {getSchema as getLocationsSchema, getOptions as getLocationsOptions} from "app/web/forms/locations"

export function getSchema() {
  return {
    type: "object",
    properties: {
      id: {
        type: "number",
        required: true
      },
      name: {
        type: "string",
        required: true
      },
      type: {
        type: "string",
        required: true,
        default: "map"
      },
      layers: {
        type: "array",
        items: getLayerSchema()
      },
      timeRange: getTimeRangeSchema(),
      locationType: getLocationTypeSchema(),
      locations: getLocationsSchema()
    },
    dependencies: {
      layers: "type",
      timeRange: "type",
      locationType: "type",
      locations: "locationType"
    }
  }
}

export function getOptions() {
  return {
    label: "View",
    fields: {
      id: {
        type: "hidden"
      },
      name: {
        label: "Name"
      },
      type: createSelectOptions({
        label: "Type",
        dataSource: [
          {
            value: "map",
            text: "Map"
          },
          {
            value: "trends",
            text: "Trends"
          }
        ],
        postRender(done) {
          this.on("change", () => {
            if (this.getValue() === "trends") {
              // Trigger change event of locationType to update locations
              this.parent.childrenByPropertyId.locationType.trigger("change")
            }
          })
          done()
        }
      }),
      layers: createArrayOptions({
        label: "Layers",
        items: getLayerOptions(),
        dependencies: {
          type: "map"
        }
      }),
      timeRange: getTimeRangeOptions({
        dependencies: {
          type: "trends"
        }
      }),
      locationType: getLocationTypeOptions({
        dependencies: {
          type: "trends"
        },
        postRender(done) {
          this.on("change", () => {
            updateLocations(this, this.parent.childrenByPropertyId.locations)
          })
          done()
        }
      }),
      locations: getLocationsOptions()
    }
  }
}
