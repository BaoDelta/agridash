import store from "app/web/store"
import {fetchGeos} from "app/web/actions/geos"
import createArrayOptions from "app/web/forms/createArrayOptions"
import createSelectOptions from "app/web/forms/createSelectOptions"
import {getSchema as getLayerSchema, getOptions as getLayerOptions} from "app/web/forms/layer"
import {getSchema as getLocationTypeSchema, getOptions as getLocationTypeOptions} from "app/web/forms/locationType"
import {getSchema as getLocationsSchema, getOptions as getLocationsOptions} from "app/web/forms/locations"

export function getSchema() {
  return {
    type: "object",
    properties: {
      name: {
        type: "string",
        required: true
      },
      type: {
        type: "string",
        required: true
      },
      layers: {
        type: "array",
        items: getLayerSchema()
      },
      timeRange: {
        type: "string",
        required: true
      },
      locationType: getLocationTypeSchema(),
      locations: getLocationsSchema()
    },
    dependencies: {
      layers: "type",
      timeRange: "type",
      locationType: "type",
      locations: "locationType"
    }
  }
}

export function getOptions() {
  return {
    label: "View",
    fields: {
      name: {
        label: "Name"
      },
      type: createSelectOptions({
        label: "Type",
        dataSource: [
          {
            value: "map",
            text: "Map"
          },
          {
            value: "trends",
            text: "Trends"
          }
        ]
      }),
      layers: createArrayOptions({
        label: "Layers",
        items: getLayerOptions(),
        dependencies: {
          type: "map"
        }
      }),
      timeRange: createSelectOptions({
        label: "Time Range",
        dataSource: [
          {
            value: "last5",
            text: "Last 5 Years"
          },
          {
            value: "last10",
            text: "Last 10 Years"
          },
          {
            value: "last15",
            text: "Last 15 Years"
          },
          {
            value: "last20",
            text: "Last 20 Years"
          }
        ],
        dependencies: {
          type: "trends"
        }
      }),
      locationType: getLocationTypeOptions({
        dependencies: {
          type: "trends"
        }
      }),
      locations: getLocationsOptions()
    },
    events: {
      change() {
        const view = this.getValue()
        const locations = this.childrenByPropertyId.locations
        if (view.locationType) {
          locations.options.dataSource = done => {
            store.dispatch(fetchGeos(view.locationType)).then(() => {
              done(store.getState().geos[view.locationType].geos.map(geo => ({
                value: geo.code,
                text: geo.name
              })))
            })
          }
          locations.refresh()
        }
      }
    }
  }
}
