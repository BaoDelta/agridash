import {getArraySchema, getHiddenOptions, getArrayOptions} from "app/web/forms/common"
import {getSchema as getIdSchema} from "app/web/forms/id"
import {getSchema as getNameSchema, getOptions as getNameOptions} from "app/web/forms/name"
import {getSchema as getViewTypeSchema, getOptions as getViewTypeOptions} from "app/web/forms/viewType"
import {getSchema as getLayerSchema, getOptions as getLayerOptions} from "app/web/forms/layer"
import {getSchema as getTimeRangeSchema, getOptions as getTimeRangeOptions} from "app/web/forms/timeRange"
import {getSchema as getRefCategoriesSchema, getOptions as getRefCategoriesOptions} from "app/web/forms/refCategories"
import {getSchema as getLocationTypeSchema, getOptions as getLocationTypeOptions, updateLocations}
  from "app/web/forms/locationType"
import {getSchema as getLocationsSchema, getOptions as getLocationsOptions} from "app/web/forms/locations"

export function getSchema() {
  return {
    type: "object",
    properties: {
      id: getIdSchema(),
      name: getNameSchema(),
      type: getViewTypeSchema(),
      layers: getArraySchema(getLayerSchema()),
      timeRange: getTimeRangeSchema(),
      categories: getRefCategoriesSchema(),
      locationType: getLocationTypeSchema(),
      locations: getLocationsSchema()
    },
    dependencies: {
      layers: "type",
      timeRange: "type",
      categories: "type",
      locationType: "type",
      locations: "locationType"
    }
  }
}

export function getOptions() {
  return {
    label: "View",
    fields: {
      id: getHiddenOptions(),
      name: getNameOptions(),
      type: getViewTypeOptions({
        postRender(done) {
          this.on("change", () => {
            if (this.getValue() === "trends") {
              // Trigger change event of locationType to update locations
              this.parent.childrenByPropertyId.locationType.trigger("change")
            }
          })
          done()
        }
      }),
      layers: getArrayOptions({
        label: "Layers",
        items: getLayerOptions(),
        dependencies: {
          type: "map"
        }
      }),
      timeRange: getTimeRangeOptions({
        dependencies: {
          type: "trends"
        }
      }),
      categories: getRefCategoriesOptions({
        dependencies: {
          type: "trends"
        }
      }),
      locationType: getLocationTypeOptions({
        dependencies: {
          type: "trends"
        },
        postRender(done) {
          this.on("change", () => {
            updateLocations(this, this.parent.childrenByPropertyId.locations)
          })
          done()
        }
      }),
      locations: getLocationsOptions()
    }
  }
}

export function getDataSource(categories) {
  return categories.map(({id, name}) => ({
    value: id,
    text: name
  }))
}
