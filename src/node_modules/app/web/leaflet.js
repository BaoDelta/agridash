import "leaflet.fullscreen"
import "leaflet.fullscreen/Control.FullScreen.css"

import React from "react"
import {render, unmountComponentAtNode} from "react-dom"
import {assign, remove} from "app/core/utils"

const {L} = window

const controlAddTo = L.Control.prototype.addTo
const controlRemoveFrom = L.Control.prototype.removeFrom

assign(L.Control.prototype, {
  addTo(map) {
    map._controls = map._controls || []
    map._controls.push(this)
    return controlAddTo.call(this, map)
  },
  removeFrom(map) {
    if (map._controls) {
      remove(map._controls, this)
    }
    return controlRemoveFrom.call(this, map)
  }
})

assign(L.Control, {
  fromReact(Control, options) {
    return L.Control.extend({
      options,
      onAdd() {
        const container = L.DomUtil.create("div", "")
        render(<Control options={options}/>, container)
        return container
      },
      onRemove() {
        unmountComponentAtNode(this.getContainer())
      }
    })
  }
})

const mapClearControlPos = L.Map.prototype._clearControlPos

assign(L.Map.prototype, {
  _clearControlPos() {
    if (this._controls) {
      this._controls.forEach(control => {
        control.removeFrom(this)
      })
      this._controls = null
    }
    mapClearControlPos.call(this)
  }
})

export default L
