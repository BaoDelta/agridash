import L from "leaflet"
import React from "react"
import {connect} from "react-redux"
import {mapContainer} from "app/web/views/MapView.css"
import {getGeos, getMapData} from "app/web/actions/model"
import {map as mapObject} from "app/core/utils"

const {Component, PropTypes} = React

class NewMapView extends Component {

  static propTypes = {
    dispatch: PropTypes.func.isRequired,
    info: PropTypes.object.isRequired,
    report: PropTypes.object.isRequired,
    view: PropTypes.object.isRequired,
    requestId: PropTypes.number.isRequired,
    geoData: PropTypes.object,
    mapData: PropTypes.object,
    sessionId: PropTypes.number
  }

  componentDidMount() {
    this.loadData(this.props)
  }

  componentWillReceiveProps(nextProps) {
    const {report, view, requestId} = this.props
    const {report: nextReport, view: nextView, requestId: nextRequestId} = nextProps
    if (report.id !== nextReport.id || view.id !== nextView.id || requestId !== nextRequestId) {
      this.loadData(nextProps)
    }
  }

  componentDidUpdate() {
    if (this.isLoading()) {
      return
    }
    const {info: {tileUrl, sessionId}, report, view, requestId} = this.props
    if (!this.map) {
      this.map = L.map(this.refs.container, {
        attributionControl: false,
        fullscreenControl: true,
        zoomAnimation: false,
        center: [37.8, -96.9],
        zoom: 4
      })
    }
    const year = 2014
    const resultId = +`${requestId}${year}`
    const tileLayerUrl = `${tileUrl}/report/${report.id}/view/${view.id}/{z}/{x}/{y}.png`
      + `?sessionId=${sessionId}&resultId=${resultId}`
    if (this.tileLayer) {
      this.tileLayer.setUrl(tileLayerUrl)
    } else {
      this.tileLayer = L.tileLayer(tileLayerUrl).addTo(this.map)
    }
  }

  loadData(props) {
    const {dispatch, report, view, requestId} = props
    const geoSources = {}
    view.layers.forEach(layer => {
      geoSources[layer.locationType] = true
    })
    mapObject(geoSources, (status, geoSource) => {
      dispatch(getGeos(geoSource))
    })
    dispatch(getMapData(report, view, requestId))
  }

  isLoading() {
    const {geoData, mapData} = this.props
    return !geoData || !mapData
  }

  render() {
    return <div ref="container" className={mapContainer}>
    </div>
  }

}

export default connect((state, ownProps) => {
  const {report, view, requestId} = ownProps
  const {info, model: {geo: geoState, viewData}} = state
  const props = {}
  const geoSources = {}
  view.layers.forEach(layer => {
    geoSources[layer.locationType] = true
  })
  if (geoState) {
    const geoData = {}
    let ok = true
    mapObject(geoSources, (status, geoSource) => {
      const geo = geoState[geoSource]
      if (geo) {
        geoData[geoSource] = geo
      } else {
        ok = false
      }
    })
    if (ok) {
      props.geoData = geoData
    }
  }
  if (viewData) {
    const {map} = viewData
    if (map && report.id === map.reportId && view.id === map.viewId
        && requestId === map.requestId) {
      props.mapData = map.data
    }
  }
  props.sessionId = info.sessionId
  return props
})(NewMapView)
