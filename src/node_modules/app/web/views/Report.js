import React from "react"
import {connect} from "react-redux"
import cx from "classnames"
import {columnHeader, viewMenu, viewContainer} from "app/web/views/Report.css"
import Link from "app/web/views/Link"
import Icon from "app/web/views/Icon"
import Loading from "app/web/views/Loading"
import MapView from "app/web/views/MapView"
import TrendsView from "app/web/views/TrendsView"
import {find} from "app/core/utils"
import {getReport} from "app/web/actions/model"

const {Component, PropTypes} = React

const viewByType = {
  map: {
    icon: "map-o",
    component: MapView
  },
  trends: {
    icon: "line-chart",
    component: TrendsView
  }
}

class NewReport extends Component {

  static propTypes = {
    dispatch: PropTypes.func.isRequired,
    params: PropTypes.object.isRequired,
    history: PropTypes.object.isRequired,
    info: PropTypes.object.isRequired,
    report: PropTypes.object,
    author: PropTypes.object
  }

  componentDidMount() {
    this.loadReport(this.props)
  }

  componentWillReceiveProps(nextProps) {
    const {params} = this.props
    const {report, history, params: nextParams} = nextProps
    const id = +params.id
    const nextId = +nextParams.id
    const nextViewId = +nextParams.viewId
    if (report && !nextViewId) {
      history.replaceState(null, `/report/${report.id}/view/${report.config.defaultView}`)
      return
    }
    if (id !== nextId) {
      this.loadReport(nextProps)
    }
  }

  loadReport = props => {
    const {dispatch, params} = props
    dispatch(getReport(+params.id))
  }

  render() {
    const {info, report, author, params} = this.props
    if (!report) {
      return <Loading/>
    }
    const activeViewId = +params.viewId
    const activeView = find(report.config.views, "id", activeViewId)
    const ViewComponent = viewByType[activeView.type].component
    return <div>
      <div className="row">
        <div className="col-sm-4 col-md-3">
          <div className={`text-center ${columnHeader}`}>
            <h3>{report.config.name}</h3>
            <Link to={`/user/${author.username}`}>{author.name}</Link>
          </div>
          <ul className={`nav nav-pills nav-stacked ${viewMenu}`}>
            {report.config.views.map(view => <li key={view.id} className={cx(view.id === activeViewId && "active")}>
              <Link to={`/report/${report.id}/view/${view.id}`}>
                <Icon icon={viewByType[view.type].icon} fw/> {view.name}
              </Link>
            </li>)}
          </ul>
        </div>
        <div className="col-sm-8 col-md-9">
          <div className={`text-center ${columnHeader}`}>
            <h3>{activeView.name}</h3>
          </div>
          <div className={viewContainer}>
            <ViewComponent info={info} report={report} view={activeView}/>
          </div>
        </div>
      </div>
    </div>
  }

}

export default connect((state, ownProps) => {
  const {params: {id}} = ownProps
  const report = state.model.report && state.model.report[id]
  const author = report && state.model.user && state.model.user[report.authorId]
  return {
    info: state.info,
    report,
    author
  }
})(NewReport)
