import $ from "jquery"
import {Chart} from "Highcharts"
import React from "react"
import {connect} from "react-redux"
import {keys} from "app/core/utils"
import {full} from "app/web/views/App.css"
import Loading from "app/web/views/Loading"
import {getGeos, getTrendsData} from "app/web/actions/model"

const {Component, PropTypes} = React

class TrendsView extends Component {

  static propTypes = {
    dispatch: PropTypes.func.isRequired,
    report: PropTypes.object.isRequired,
    view: PropTypes.object.isRequired,
    requestId: PropTypes.number.isRequired,
    geoData: PropTypes.object,
    trendsData: PropTypes.array
  }

  componentDidMount() {
    this.loadData(this.props)
  }

  componentWillReceiveProps(nextProps) {
    const {report, view, requestId} = this.props
    const {report: nextReport, view: nextView, requestId: nextRequestId} = nextProps
    if (report.id !== nextReport.id || view.id !== nextView.id || requestId !== nextRequestId) {
      this.loadData(nextProps)
    }
  }

  componentDidUpdate() {
    this.renderChart()
  }

  loadData = props => {
    const {dispatch, report, view, requestId} = props
    dispatch(getGeos(view.locationType))
    dispatch(getTrendsData(report, view, requestId))
  }

  renderChart = () => {
    if (this.isLoading()) {
      return
    }
    const {report, geoData, trendsData} = this.props
    const categoryById = {}
    report.config.categories.forEach(category => {
      categoryById[category.id] = category
    })
    const years = keys(trendsData[0].data)
    years.sort()
    const element = $(this.refs.container)
    this.chart = new Chart({
      title: false,
      credits: false,
      chart: {
        renderTo: element[0],
        backgroundColor: "#fffff0"
      },
      xAxis: {
        title: false,
        categories: years
      },
      yAxis: {
        title: false
      },
      legend: {
        maxHeight: element.height() / 5
      },
      plotOptions: {
        series: {
          animation: {
            duration: 250
          }
        }
      },
      series: trendsData.map(record => {
        const geo = geoData.geoByCode[record.code]
        const category = categoryById[record.category]
        return {
          name: `${geo.name} - ${category.name}`,
          data: years.map(year => record.data[year])
        }
      })
    })
  }

  isLoading() {
    const {geoData, trendsData} = this.props
    return !geoData || !trendsData
  }

  render() {
    if (this.isLoading()) {
      return <Loading/>
    }
    return <div ref="container" className={full}>
    </div>
  }

}

export default connect((state, ownProps) => {
  const {report, view, requestId} = ownProps
  const {model: {geo: geoState, viewData}} = state
  const props = {}
  if (geoState) {
    props.geoData = geoState[view.locationType]
  }
  if (viewData) {
    const {trends} = viewData
    if (trends && report.id === trends.reportId && view.id === trends.viewId
        && requestId === trends.requestId) {
      props.trendsData = trends.data
    }
  }
  return props
})(TrendsView)
