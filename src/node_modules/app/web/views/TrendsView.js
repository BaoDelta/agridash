import $ from "jquery"
import {Chart} from "Highcharts"
import React from "react"
import {connect} from "react-redux"
import {keys} from "app/core/utils"
import {full} from "app/web/views/App.css"
import Loading from "app/web/views/Loading"
import {getViewData} from "app/web/actions/model"

const {Component, PropTypes} = React

class TrendsView extends Component {

  static propTypes = {
    dispatch: PropTypes.func.isRequired,
    report: PropTypes.object.isRequired,
    view: PropTypes.object.isRequired,
    viewData: PropTypes.array
  }

  componentDidMount() {
    this.loadViewData(this.props)
  }

  componentWillReceiveProps(nextProps) {
    const {report, view} = this.props
    const {report: nextReport, view: nextView} = nextProps
    if (report.id !== nextReport.id || view.id !== nextView.id) {
      this.loadViewData(nextProps)
    }
  }

  componentDidUpdate() {
    this.drawChart()
  }

  loadViewData = props => {
    const {dispatch, report, view} = props
    dispatch(getViewData(report, view))
  }

  drawChart = () => {
    const {viewData} = this.props
    if (!viewData) {
      return
    }
    const years = keys(viewData[0].data)
    years.sort()
    const element = $(this.refs.container)
    this.chart = new Chart({
      title: false,
      credits: false,
      chart: {
        renderTo: element[0],
        backgroundColor: "#fffff0"
      },
      xAxis: {
        title: false,
        categories: years
      },
      yAxis: {
        title: false
      },
      legend: {
        maxHeight: element.height() / 5
      },
      plotOptions: {
        series: {
          animation: {
            duration: 250
          }
        }
      },
      series: viewData.map(record => ({
        name: `${record.name} - ${record.categoryName}`,
        data: years.map(year => record.data[year])
      }))
    })
  }

  render() {
    const {viewData} = this.props
    if (!viewData) {
      return <Loading/>
    }
    return <div ref="container" className={full}>
    </div>
  }

}

export default connect((state, ownProps) => {
  const {report, view} = ownProps
  const viewData = state.model.viewData && state.model.viewData[`${report.id}/${view.id}`]
  return {
    viewData
  }
})(TrendsView)
